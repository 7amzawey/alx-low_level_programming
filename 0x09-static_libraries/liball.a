!<arch>
0-isupper.c/    0           0     0     644     254       `
#include "main.h"
/**
 * _isupper - checks fo uppercase character
 * @c: the checked number
 * Return: 1 if its uppercase otherwise 0
 */
int _isupper(int c)
{
int n;
	for (n = 'A'; n <= 'Z'; n++)
	{
		if (c == n)
		{
		return (1);
		}
	}
	return (0);
}
0-memset.c/     0           0     0     644     342       `
#include "main.h"
/**
 * *_memset -  writes a function that fills memory
 * @s: Pointer to the memory
 * @b: is a constant byte
 * @n: the first bytes of the memory pointed to by s
 * Return: the fucken value
 */
char *_memset(char *s, char b, unsigned int n)
{
	unsigned int i;

	for (i = 0; i < n; i++)
	{
		*(s + i) = b;
	}
	return (s);
}
0-strcat.c/     0           0     0     644     400       `
#include "main.h"
#include <stdio.h>
/**
 * *_strcat - appends the src string to the dest string
 * @dest: the first string
 * @src: the pointer of the second one
 * Return: the concatenated one
 */
char *_strcat(char *dest, char *src)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (src[j] != '\0')
	{
		dest[i] = src[j];
		j++;
		i++;
	}
	dest[i] = '\0';
	return (dest);
}
1-isdigit.c/    0           0     0     644     221       `
#include "main.h"
/**
 * _isdigit - checks for digits form 0 to 9
 * @c: is the variable
 * Return: 1 if there is adigit 0 if not
 */
int _isdigit(int c)
{
if (c >= '0' && c <= '9')
{
return (1);
}
else
{
return (0);
}
}

1-memcpy.c/     0           0     0     644     392       `
#include "main.h"

/**
 * *_memcpy - copies n byets from memorey area
 * src to memory area dest
 * @dest: is the one will receive the copy
 * @src: is the one we'll copy from
 * @n: the number of bytes copied
 * Return: pointer to dest
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	unsigned int i;

	i = 0;

	for (i = 0; i < n; i++)
	{
		dest[i] = src[i];
	}
	return (dest);
}
1-strncat.c/    0           0     0     644     429       `
#include "main.h"
/**
 * *_strncat - this function concatenate two stings
 * @dest: the first sting
 * @src: the second strin
 * @n: the size of the concatenated character
 * Return: the concatenated string
 */
char *_strncat(char *dest, char *src, int n)
{
	int i = 0;
	int j = 0;

	while (dest[i] != '\0')
	{
		i++;
	}
	while (j < n && src[j] != '\0')
	{
		dest[i] = src[j];
		i++;
		j++;
	}
	dest[i] = '\0';
	return (dest);
}

100-atoi.c/     0           0     0     644     588       `
#include "main.h"
/**
 * _atoi - converts the string to integers
 * @s: the string
 * Return: the integers the will represnt instead of string
 */
int _atoi(char *s)
{
int result = 0;
int sign = 1;
int i = 0;

/* Find the first digit or sign */
while (s[i] != '\0' && (s[i] < '0' || s[i] > '9'))
{

/* Check if the first character is a sign */
if (s[i] == '-')
{
sign *= -1;
}
else if (s[i] != '+')
{
break;
}
i++;
}
/* Convert the subsequent characters to an integer */
while (s[i] >= '0' && s[i] <= '9')
{
result = result * 10 + (s[i] - '0');
i++;
}
result *= sign;
return (result);
}

2-strchr.c/     0           0     0     644     306       `
#include "main.h"
/**
 * _strchr - return a pointer
 * to the first occurence of the character
 * @s: the string
 * @c: the character
 * Return: the pointer
 */

char *_strchr(char *s, char c)
{
	int i = 0;

	while (s[i] != '\0')
	{
		if (s[i] == c)
		{
			return (&s[i]);
		}
		i++;
	}
	return (&s[i]);
}
2-strlen.c/     0           0     0     644     214       `
#include "main.h"
/**
 * _strlen - returns the size of a string
 * @s: the pointer
 * Return: the length of a string
 */
int _strlen(char *s)
{
	int length = 0;

	while (*s++)
	{
		length++;
	}
	return (length);
}
2-strncpy.c/    0           0     0     644     384       `
#include "main.h"
/**
 * *_strncpy - this function copies a string
 * @dest: one of the strings
 * @src: is the second string
 * @n: is the length of the string
 * Return: will return the copied function
 */
char *_strncpy(char *dest, char *src, int n)
{
int i = 0;
	while (src[i] != '\0' && i < n)
	{
		dest[i] = src[i];
		i++;
	}
	if(i < n)
	{
	dest[i] = '\0';
	}
	return (dest);
}
3-islower.c/    0           0     0     644     208       `
#include "main.h"
/**
 * _islower - checks for lowercase character
 * @c: is a variable
 * Return: 1 and 0
 */
int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
		return (1);
	}
	else
	{
		return (0);
	}
}
3-puts.c/       0           0     0     644     276       `
#include "main.h"
#include <stdio.h>
/**
 * _puts - print the string followed by a new fucken line.
 * @str: the string that will be printed
 * Return: will return the printed string
 */
void _puts(char *str)
{
	while (*str)
	{
		_putchar(*str);
		str++;
	}
	putchar('\n');
}
3-strcmp.c/     0           0     0     644     355       `
#include "main.h"
/**
 * _strcmp - this function compares two strings
 * @s1: is the first string
 * @s2: is the second string
 * Return: the defferience between them
 */
int _strcmp(char *s1, char *s2)
{
	int i = 0;

	while (s1[i] != '\0' && s2[i] != '\0')
	{
		if (s1[i] != s2[i])
		{
			return (s1[i] - s2[i]);
		}
		i++;
	}
return (s1[i] - s2[i]);
}


3-strspn.c/     0           0     0     644     489       `
#include "main.h"
/**
 * _strspn - returns the number of bytes in the
 * intial segement of s which consist only of
 * bytes from accept
 * @s: consist only of byets from accept
 * @accept: is the string
 * Return: number of bytes
 */
unsigned int _strspn(char *s, char *accept)
{
	int i;
	int j;
	int count = 0;

	

	for (i = 0; s[i]; i++)
	{
		for (j = 0; accept[j]; j++)
		{

		if (s[i] == accept[i])
		{
			count++;
			break;
		}
		}
		if (!accept[j])
			break;
	}

	return (count);
}

4-isalpha.c/    0           0     0     644     250       `
#include "main.h"
/**
 * _isalpha - checks for alphabetic character
 * @c: is a varble
 * Return: 1 if it is alphabtic 0 if not
 */
int _isalpha(int c)
{
	if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z'))
{
	return (1);
}
else
{
	return (0);
}
}
4-strpbrk.c/    0           0     0     644     447       `
#include "main.h"

/**
 * *_strpbrk - searches a string for any of a set of
 * bytes
 * @s: the string that will be scanned
 * @accept: the string that will be seen if any
 * letter matches with the scaned string
 * Return: the repeated characters
 */
char *_strpbrk(char *s, char *accept)
{
	char *p1 = s, *p2 = accept;

	while (*p1 != '\0')
	{
	for (p2 = accept; *p2 != '\0'; p2++)
	{
	if (*p1 == *p2)
	return (p1);
	}
	p1++;
	}
	return (p1);
}

5-strstr.c/     0           0     0     644     530       `
#include "main.h"
/**
 * *_strstr - that function locates a substring
 * @haystack: is the one that that substring is in
 * @needle: is the one that will be searching for
 * matching substring with haystack
 * Return: apointer to the beginning of the located
 * substing
 */

char *_strstr(char *haystack, char *needle)
{
	char *p;
	char *q;
	int i;

	for (i = 0; haystack[i]; i++)
	{
		p = &haystack[i];
		q = needle;

		while (*p && *q && *p == *q)
		{
			p++;
			q++;
		}
		if (!*q)
			return (&haystack[i]);
	}
	return (0);
}
6-abs.c/        0           0     0     644     225       `
#include "main.h"
/**
 * _abs - computes the absolute value of an integer
 * @i: The integer to compute the absolute value of
 * Return: The absolute value of i
 *
 */
int _abs(int i)
{
	if (i < 0)
{
	i = -i;
}
return (i);
}

9-strcpy.c/     0           0     0     644     341       `
#include "main.h"
/**
 * *_strcpy - copy a string from one pointer to another
 * @dest: which is the first pointer
 * @src: which is the second pointer
 * Return: returns the printed pointer
 */
char *_strcpy(char *dest, char *src)
{
	int i = 0;

	while (src[i] != '\0')
			{
		dest[i] = src[i];
		i++;
	}
	dest[i] = '\0';
	return (dest);
}

_putchar.c/     0           0     0     644     247       `
#include <unistd.h>

/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}

main.c/         0           0     0     644     148       `
#include "main.h"

int main(void)
{
    _puts("\"At the end of the day, my goal was to be the best hacker\"\n\t- Kevin Mitnick");
    return (0);
}
